language: python
os: linux
sudo: required

branches:
  only:
    - master
    - stable

services:
    - docker

env:
  global:
    - CIBW_BEFORE_BUILD="{pip} install cython numpy scipy six --use-wheel"
    - CIBW_TEST_COMMAND="python {project}/util/bee.py test -v"
    - secure: lkNTDRCUWdONzpiC3EMFm4jPN+R1INFM88Cw/e3XT1Qh+Eaz8niDt38/ZAPpg3dHRNfseprgvZ4IXjMLm3AslRaEso59CIgVG8cJj1uCr0xkUsUK9q9QKQnAETb633v+kjhIYe/vCYV4fPV7wsHTsCyckJQP6LCOxIjmmbU7u14k2oiMvb8oc2CSlhB1XTEpOMla54gyX1Tr0tSaDe88+sz2m2ATcNgIgIgsxc6u9Ekv+YeTuO4qcsHk3G40umtzWISuuv4m5t6Gxav8H1YXCxy3vUS4H+q4ZAlbB9fMJNoifEEnath7C6RtthU6iQDTFQHD0trLJlNK0iOb4/lmVlGxu02neTbRQFdXRk40BcKZk2ZUWLFBfL+FhBgj/m6ll/EDjCUGVki5BdFcY0fcOmW6rHxG/PLUMgaN/W2U77dCorc+tHpFoh5CBFp+NYoQ8+UXHo1kmgip4gfx2fKICW3dP9ucrPitR2VPAu0HKLZyCx2gPFcr3IdDteSSt138vSsE4c3hgTf8DRp3w0PVsI9GqWk7mQOmC2zm+aPFNnjaoMiyaEHzdWHrMzWfi4/BuZiGINDcfIp42ZnJEdOFnm+5vAkfbs9GbOgjq0i5RqQBxKP0IFVFQzh4bSAii2GLISHQzCnchh4hkEpzYg4HJKtwCLGlq2fWIBbeQigMiIc=

matrix:
  include:
    - os: osx
      language: generic
      env:
        - PYTHON=3.6.3

before_install: |
  # macOSX CI environment configuration: https://pythonhosted.org/CodeChat/.travis.yml.html
  if [ "$TRAVIS_OS_NAME" == "osx" ]; then
    brew update
    # Per the `pyenv homebrew recommendations <https://github.com/yyuu/pyenv/wiki#suggested-build-environment>`_.
    brew install openssl readline
    # See https://docs.travis-ci.com/user/osx-ci-environment/#A-note-on-upgrading-packages.
    # I didn't do this above because it works and I'm lazy.
    brew outdated pyenv || brew upgrade pyenv
    # virtualenv doesn't work without pyenv knowledge. venv in Python 3.3
    # doesn't provide Pip by default. So, use `pyenv-virtualenv <https://github.com/yyuu/pyenv-virtualenv/blob/master/README.md>`_.
    brew install pyenv-virtualenv
    pyenv install $PYTHON
    # I would expect something like ``pyenv init; pyenv local $PYTHON`` or
    # ``pyenv shell $PYTHON`` would work, but ``pyenv init`` doesn't seem to
    # modify the Bash environment. ??? So, I hand-set the variables instead.
    export PYENV_VERSION=$PYTHON
    export PATH="/Users/travis/.pyenv/shims:${PATH}"
    pyenv-virtualenv venv
    source venv/bin/activate
    # A manual check that the correct version of Python is running.
    python --version
  fi


install:
  - pip install six
  - pip install cython numpy scipy --use-wheel
  - pip install pycodestyle
  - echo "$TRAVIS_BRANCH $TRAVIS_PYTHON_VERSION"
  - |
    if [[ "$TRAVIS_BRANCH" == "stable" ]] ; then
        pip install cibuildwheel==0.5.1 twine --use-wheel
    else
        if [[ "$TRAVIS_PYTHON_VERSION" == "3.6" ]] ; then
            pip install coverage coveralls --use-wheel
        fi
    fi

script:
  - echo "Running code style checks"
  - make styleCheck
  - echo "Running build for $TRAVIS_PYTHON_VERSION"
  - |
    if [[ "$TRAVIS_BRANCH" == "stable" ]] ; then
        # all version targets: build a wheel!
        make compile
        echo "Generating wheel... (skipping $(CIBW_SKIP)"
        cibuildwheel --output-dir wheelhouse
        ls -l wheelhouse/*
    elif [[ "$TRAVIS_BRANCH" == "master" ]] ; then
        # master branch: regular tests and code coverage analysis
        if [[ "$TRAVIS_PYTHON_VERSION" == "3.6" ]] ; then
            make compile-coverage
            echo "Running coverage analysis..."
            coverage run --source=fastmat util/bee.py list makedump
            coverage run -a --source=fastmat util/bee.py test -vf -s Matrix.class
            coverage run -a --source=fastmat util/bee.py test -v
            coverage run -a --source=fastmat util/bee.py documentation maxIter=0.001 maxInit=0.01 minItems=1 > /dev/null
            coverage run -a --source=fastmat util/bee.py calibrate all
        else
            make compile
            python util/bee.py test -v
        fi
    fi

after_success:
  - "./.travis.yml.after_success"
